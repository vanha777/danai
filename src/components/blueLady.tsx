// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Command: npx gltfjsx@6.1.4 IronMan.glb
// */

// import React, { useRef, useEffect, useState } from 'react'
// import { useGLTF, useAnimations } from '@react-three/drei'
// // import { useInteractionState } from './userInteractionState';

// export default function Model(userState?: string) {

//     const group = useRef()
//     const { nodes, materials, animations } = useGLTF('/blueLady.glb')
//     const { actions } = useAnimations(animations, group)

//     // const { userState, updateUserState } = useInteractionState();


//     // set actions and pose when user interact
//     useEffect(() => {
//         if (!actions) {
//             // Handle case where actions might be null or undefined
//             return;
//         }
//         console.log(userState);
//         console.log("this is action ", actions);
//         if (userState === 'idle') {
//             actions.Female_Idle?.reset().fadeIn(0.5).play();
//             return () => { actions.Female_Idle?.fadeOut(0.5) };
//         }
//         if (userState === 'talk') {
//             actions.Female_Talk?.reset().fadeIn(0.5).play();
//             return () => { actions.Female_Talk?.fadeOut(0.5) };
//         } else {
//             actions.Female_Idle?.reset().fadeIn(0.5).play();
//             return () => { actions.Female_Idle?.fadeOut(0.5) };
//         }
//         // if (userState === 'interract') {
//         //     actions.Female_Talk.reset().fadeIn(0.5).play();
//         //     return () => { actions.Female_Talk.fadeOut(0.5) };
//         // }
//         // if (userState === 'hit') {
//         //     actions.HeadHit.reset().fadeIn(0.5).play();
//         //     return () => { actions.HeadHit.fadeOut(0.5) };
//         // }
//         // if (userState === 'talk') {
//         //     actions.Female_Talk.reset().fadeIn(0.5).play();
//         //     return () => { actions.Female_Talk.fadeOut(0.5) };
//         // }
//         // if (userState === 'talkPhone') {
//         //     actions.Talk1.reset().fadeIn(0.5).play();
//         //     return () => { actions.Talk1.fadeOut(0.5) };
//         // }
//         // if (userState === 'idle') {
//         //     actions.Female_idle.reset().fadeIn(0.5).play();
//         //     return () => { actions.Female_idle.fadeOut(0.5) };
//         // }
//         // if (userState === 'look') {
//         //     actions.Looking.reset().fadeIn(0.5).play();
//         //     return () => { actions.Looking.fadeOut(0.5) };
//         // }
//         // actions.Female_Talk.fadeIn(0.5).play();
//         // setTimeout(() => {
//         //     actions.Female_idle.fadeOut(0.5)
//         //     actions.Female_idle.reset().fadeIn(0.5).play();
//         // }, 3500);
//         // return () => { actions.Female_idle.fadeOut(0.5) };
//     }, [userState]);

//     useEffect(() => {
//         console.log(actions)

//     }, [])

//     // use gltfjsx@6.1.4 to read local files glb then convert into component that are read by react-three-drei
//     return (

//         <group ref={group} dispose={null}>
//             <group name="Sketchfab_Scene">
//                 <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={2.126}>
//                     <group
//                         name="Facial_&_Body_Animated_Party_F_0001_-_ActorCorefbx"
//                         rotation={[Math.PI / 2, 0, 0]}
//                         scale={0.01}>
//                         <group name="Object_2">
//                             <group name="RootNode">
//                                 <group name="Object_4">
//                                     <primitive object={nodes._rootJoint} />
//                                     <skinnedMesh
//                                         name="Object_7"
//                                         geometry={nodes.Object_7.geometry}
//                                         material={materials.Character}
//                                         skeleton={nodes.Object_7.skeleton}
//                                         morphTargetDictionary={nodes.Object_7.morphTargetDictionary}
//                                         morphTargetInfluences={nodes.Object_7.morphTargetInfluences}
//                                     />
//                                     <group name="Object_6" rotation={[-Math.PI / 2, 0, 0]} />
//                                     <group name="blue" rotation={[-Math.PI / 2, 0, 0]} />
//                                 </group>
//                             </group>
//                         </group>
//                     </group>
//                 </group>
//             </group>
//         </group>

//     )
// }

// useGLTF.preload('/blueLady.glb')

import React, { useEffect, useRef } from 'react';
import { Group } from 'three';
import { useGLTF, useAnimations } from '@react-three/drei';
import { Mesh, SkinnedMesh, Material, MeshStandardMaterial } from 'three';
import * as THREE from 'three';

// Define types for GLTF model components
interface GLTFNodes {
    _rootJoint: THREE.Object3D; // Change 'any' to a more specific type if needed
    Object_7: {
        geometry: THREE.BufferGeometry; // Updated from Geometry to BufferGeometry
        material: MeshStandardMaterial;
        skeleton: THREE.Skeleton;
        morphTargetDictionary: { [key: string]: number };
        morphTargetInfluences: number[];
    };
}

interface GLTFMaterials {
    Character: MeshStandardMaterial;
}

interface ModelProps {
    userState?: string | null; // userState can be a string or null, and it is optional
}

export default function Model({ userState }: ModelProps) {
    const group = useRef<Group>(null); // Type group as Group
    const { nodes, materials, animations } = useGLTF('/blueLady.glb') as unknown as {
        nodes: GLTFNodes;
        materials: GLTFMaterials;
        animations: any; // Adjust as needed
    };
    const { actions } = useAnimations(animations, group);

    useEffect(() => {
        if (!actions) {
            // Handle case where actions might be null or undefined
            return;
        }
        console.log(userState);
        console.log("this is action ", actions);
        if (userState === 'idle') {
            actions.Female_Idle?.reset().fadeIn(0.5).play();
            return () => { actions.Female_Idle?.fadeOut(0.5) };
        }
        if (userState === 'talk') {
            actions.Female_Talk?.reset().fadeIn(0.5).play();
            return () => { actions.Female_Talk?.fadeOut(0.5) };
        } else {
            actions.Female_Idle?.reset().fadeIn(0.5).play();
            return () => { actions.Female_Idle?.fadeOut(0.5) };
        }
    }, [userState]);

    return (
        <group ref={group} dispose={null}>
            <group name="Sketchfab_Scene">
                <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={2.126}>
                    <group
                        name="Facial_&_Body_Animated_Party_F_0001_-_ActorCorefbx"
                        rotation={[Math.PI / 2, 0, 0]}
                        scale={0.01}
                    >
                        <group name="Object_2">
                            <group name="RootNode">
                                <group name="Object_4">
                                    <primitive object={nodes._rootJoint} />
                                    <skinnedMesh
                                        name="Object_7"
                                        geometry={nodes.Object_7.geometry}
                                        material={materials.Character}
                                        skeleton={nodes.Object_7.skeleton}
                                        morphTargetDictionary={nodes.Object_7.morphTargetDictionary}
                                        morphTargetInfluences={nodes.Object_7.morphTargetInfluences}
                                    />
                                    <group name="Object_6" rotation={[-Math.PI / 2, 0, 0]} />
                                    <group name="blue" rotation={[-Math.PI / 2, 0, 0]} />
                                </group>
                            </group>
                        </group>
                    </group>
                </group>
            </group>
        </group>
    );
}
useGLTF.preload('/blueLady.glb')